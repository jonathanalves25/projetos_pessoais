{"ast":null,"code":"var arbitraryValueRegex = /^\\[(.+)\\]$/;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);\nvar tshirtUnitRegex = /^(\\d+)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|em|rem|vh|vw|pt|pc|in|cm|mm|cap|ch|ex|lh|rlh|vi|vb|vmin|vmax)/; // Shadow always begins with x and y offset separated by underscore\n\nvar shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\n\nfunction isLength(classPart) {\n  return !Number.isNaN(Number(classPart)) || stringLengths.has(classPart) || fractionRegex.test(classPart) || isArbitraryLength(classPart);\n}\n\nfunction isArbitraryLength(classPart) {\n  var _arbitraryValueRegex$;\n\n  var arbitraryValue = (_arbitraryValueRegex$ = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$[1];\n\n  if (arbitraryValue) {\n    return arbitraryValue.startsWith('length:') || lengthUnitRegex.test(arbitraryValue);\n  }\n\n  return false;\n}\n\nfunction isArbitrarySize(classPart) {\n  var _arbitraryValueRegex$2;\n\n  var arbitraryValue = (_arbitraryValueRegex$2 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$2[1];\n  return arbitraryValue ? arbitraryValue.startsWith('size:') : false;\n}\n\nfunction isArbitraryPosition(classPart) {\n  var _arbitraryValueRegex$3;\n\n  var arbitraryValue = (_arbitraryValueRegex$3 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$3[1];\n  return arbitraryValue ? arbitraryValue.startsWith('position:') : false;\n}\n\nfunction isArbitraryUrl(classPart) {\n  var _arbitraryValueRegex$4;\n\n  var arbitraryValue = (_arbitraryValueRegex$4 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$4[1];\n  return arbitraryValue ? arbitraryValue.startsWith('url(') || arbitraryValue.startsWith('url:') : false;\n}\n\nfunction isArbitraryNumber(classPart) {\n  var _arbitraryValueRegex$5;\n\n  var arbitraryValue = (_arbitraryValueRegex$5 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$5[1];\n  return arbitraryValue ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith('number:') : false;\n}\n/**\r\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\r\n */\n\n\nvar isArbitraryWeight = isArbitraryNumber;\n\nfunction isInteger(classPart) {\n  var _arbitraryValueRegex$6;\n\n  var arbitraryValue = (_arbitraryValueRegex$6 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$6[1];\n\n  if (arbitraryValue) {\n    return Number.isInteger(Number(arbitraryValue));\n  }\n\n  return Number.isInteger(Number(classPart));\n}\n\nfunction isArbitraryValue(classPart) {\n  return arbitraryValueRegex.test(classPart);\n}\n\nfunction isAny() {\n  return true;\n}\n\nfunction isTshirtSize(classPart) {\n  return tshirtUnitRegex.test(classPart);\n}\n\nfunction isArbitraryShadow(classPart) {\n  var _arbitraryValueRegex$7;\n\n  var arbitraryValue = (_arbitraryValueRegex$7 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$7[1];\n\n  if (arbitraryValue) {\n    return shadowRegex.test(arbitraryValue);\n  }\n\n  return false;\n}\n\nexport { isAny, isArbitraryLength, isArbitraryNumber, isArbitraryPosition, isArbitraryShadow, isArbitrarySize, isArbitraryUrl, isArbitraryValue, isArbitraryWeight, isInteger, isLength, isTshirtSize };","map":{"version":3,"mappings":"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","names":["arbitraryValueRegex","fractionRegex","stringLengths","Set","tshirtUnitRegex","lengthUnitRegex","shadowRegex","isLength","classPart","Number","isNaN","has","test","isArbitraryLength","arbitraryValue","exec","startsWith","isArbitrarySize","isArbitraryPosition","isArbitraryUrl","isArbitraryNumber","isArbitraryWeight","isInteger","isArbitraryValue","isAny","isTshirtSize","isArbitraryShadow"],"sources":["/Users/johnny/git/projetos_pessoais/calculadora-imc/node_modules/tailwind-merge/src/lib/validators.ts"],"sourcesContent":["const arbitraryValueRegex = /^\\[(.+)\\]$/\nconst fractionRegex = /^\\d+\\/\\d+$/\nconst stringLengths = new Set(['px', 'full', 'screen'])\nconst tshirtUnitRegex = /^(\\d+)?(xs|sm|md|lg|xl)$/\nconst lengthUnitRegex = /\\d+(%|px|em|rem|vh|vw|pt|pc|in|cm|mm|cap|ch|ex|lh|rlh|vi|vb|vmin|vmax)/\n// Shadow always begins with x and y offset separated by underscore\nconst shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/\n\nexport function isLength(classPart: string) {\n    return (\n        !Number.isNaN(Number(classPart)) ||\n        stringLengths.has(classPart) ||\n        fractionRegex.test(classPart) ||\n        isArbitraryLength(classPart)\n    )\n}\n\nexport function isArbitraryLength(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return arbitraryValue.startsWith('length:') || lengthUnitRegex.test(arbitraryValue)\n    }\n\n    return false\n}\n\nexport function isArbitrarySize(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue ? arbitraryValue.startsWith('size:') : false\n}\n\nexport function isArbitraryPosition(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue ? arbitraryValue.startsWith('position:') : false\n}\n\nexport function isArbitraryUrl(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue\n        ? arbitraryValue.startsWith('url(') || arbitraryValue.startsWith('url:')\n        : false\n}\n\nexport function isArbitraryNumber(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue\n        ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith('number:')\n        : false\n}\n\n/**\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\n */\nexport const isArbitraryWeight = isArbitraryNumber\n\nexport function isInteger(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return Number.isInteger(Number(arbitraryValue))\n    }\n\n    return Number.isInteger(Number(classPart))\n}\n\nexport function isArbitraryValue(classPart: string) {\n    return arbitraryValueRegex.test(classPart)\n}\n\nexport function isAny() {\n    return true\n}\n\nexport function isTshirtSize(classPart: string) {\n    return tshirtUnitRegex.test(classPart)\n}\n\nexport function isArbitraryShadow(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return shadowRegex.test(arbitraryValue)\n    }\n\n    return false\n}\n"]},"metadata":{},"sourceType":"module"}