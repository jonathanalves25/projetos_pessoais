{"ast":null,"code":"import T from \"react\";\nvar g = [\"a\", \"abbr\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"bdi\", \"bdo\", \"big\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"dialog\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"keygen\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"menu\", \"menuitem\", \"meta\", \"meter\", \"nav\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"picture\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"small\", \"source\", \"span\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"title\", \"tr\", \"track\", \"u\", \"ul\", \"var\", \"video\", \"wbr\", \"circle\", \"clipPath\", \"defs\", \"ellipse\", \"foreignObject\", \"g\", \"image\", \"line\", \"linearGradient\", \"marker\", \"mask\", \"path\", \"pattern\", \"polygon\", \"polyline\", \"radialGradient\", \"rect\", \"stop\", \"svg\", \"text\", \"tspan\"],\n    y = g;\nimport { twMerge as I } from \"tailwind-merge\";\n\nvar P = Symbol(\"isTwElement?\"),\n    b = (e, n) => e.reduce((r, o, t) => r.concat(o || [], n[t] || []), []),\n    S = function (e) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  let r = e.join(\" \").trim().replace(/\\n/g, \" \").replace(/\\s{2,}/g, \" \").split(\" \").filter(t => t !== \",\"),\n      o = n ? n.split(\" \") : [];\n  return I(...r.concat(o).filter(t => t !== \" \"));\n},\n    O = _ref => {\n  let [e] = _ref;\n  return e.charAt(0) !== \"$\";\n},\n    c = e => e[P] === !0,\n    C = e => function (n) {\n  for (var _len = arguments.length, r = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    r[_key - 1] = arguments[_key];\n  }\n\n  let o = function () {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let i = T.forwardRef((a, u) => {\n      let {\n        $as: p = e,\n        style: x = {},\n        ...s\n      } = a,\n          m = c(e) ? e : p,\n          w = t ? t.reduce((l, d) => Object.assign(l, typeof d == \"function\" ? d(a) : d), {}) : {},\n          f = c(m) ? s : Object.fromEntries(Object.entries(s).filter(O));\n      return T.createElement(m, { ...f,\n        style: { ...w,\n          ...x\n        },\n        ref: u,\n        className: S(b(n, r.map(l => l({ ...s,\n          $as: p\n        }))), s.className),\n        ...(c(e) ? {\n          $as: p\n        } : {})\n      });\n    });\n    return i[P] = !0, typeof e != \"string\" ? i.displayName = e.displayName || e.name || \"tw.Component\" : i.displayName = \"tw.\" + e, i.withStyle = a => o(t.concat(a)), i;\n  };\n\n  return o();\n},\n    A = y.reduce((e, n) => ({ ...e,\n  [n]: C(n)\n}), {}),\n    h = Object.assign(C, A),\n    F = h;\n\nexport { F as default };","map":{"version":3,"mappings":"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","names":["g","y","P","Symbol","b","e","n","reduce","r","o","t","concat","S","join","trim","replace","split","filter","I","O","charAt","c","C","i","T","forwardRef","a","u","$as","style","s","m","p","w","l","d","Object","assign","f","fromEntries","entries","x","ref","className","map","displayName","name","withStyle","A","h","F"],"sources":["/Users/johnny/git/projetos_pessoais/calculadora-imc/node_modules/tailwind-styled-components/src/tailwind.tsx","/Users/johnny/git/projetos_pessoais/calculadora-imc/node_modules/tailwind-styled-components/src/domElements.ts"],"sourcesContent":["import React, { CSSProperties } from \"react\"\nimport domElements from \"./domElements\"\nimport { twMerge } from \"tailwind-merge\"\n\nconst isTwElement = Symbol(\"isTwElement?\")\n\nexport type IsTwElement = { [isTwElement]: true }\nexport type FalseyValue = undefined | null | false\n\nexport type FlattenInterpolation<P> = ReadonlyArray<Interpolation<P>>\nexport type InterpolationValue = string | number | FalseyValue | TailwindComponentInterpolation\n\nexport type Interpolation<P> = InterpolationValue | InterpolationFunction<P> | FlattenInterpolation<P>\n\nexport type InterpolationFunction<P> = (props: P) => Interpolation<P>\ntype TailwindComponentInterpolation = PickU<TailwindComponentBase<any, any>, keyof TailwindComponentBase<any, any>>\n\ntype IntrinsicElementsKeys = keyof JSX.IntrinsicElements\n\ntype IsAny<T, True, False = never> = True | False extends (T extends never ? True : False) ? True : False\n\nexport const mergeArrays = (template: TemplateStringsArray, templateElements: (string | undefined | null)[]) => {\n    return template.reduce(\n        (acc, c, i) => acc.concat(c || [], templateElements[i] || []), //  x || [] to remove false values e.g '', null, undefined. as Array.concat() ignores empty arrays i.e []\n        [] as string[]\n    )\n}\n\nexport const cleanTemplate = (template: Array<Interpolation<any>>, inheritedClasses: string = \"\") => {\n    const newClasses: string[] = template\n        .join(\" \")\n        .trim()\n        .replace(/\\n/g, \" \") // replace newline with space\n        .replace(/\\s{2,}/g, \" \") // replace line return by space\n        .split(\" \")\n        .filter((c) => c !== \",\") // remove comma introduced by template to string\n\n    const inheritedClassesArray: string[] = inheritedClasses ? inheritedClasses.split(\" \") : []\n\n    return twMerge(\n        ...newClasses\n            .concat(inheritedClassesArray) // add new classes to inherited classes\n            .filter((c: string) => c !== \" \") // remove empty classes\n    )\n}\n\nexport type PickU<T, K extends keyof T> = T extends any ? { [P in K]: T[P] } : never\n// export type OmitU<T, K extends keyof T> = T extends any ? PickU<T, Exclude<keyof T, K>> : never\nexport type RemoveIndex<T> = {\n    [K in keyof T as string extends K ? never : number extends K ? never : K]: T[K]\n}\n\n/**\n * ForwardRef typings\n */\nexport type TailwindExoticComponent<P> = PickU<\n    React.ForwardRefExoticComponent<P>,\n    keyof React.ForwardRefExoticComponent<any>\n>\n\ntype MergeProps<O extends object, P extends {} = {}> =\n    // Distribute unions early to avoid quadratic expansion\n    P extends any ? IsAny<P, RemoveIndex<P> & O, P & O> : never\n// RemoveIndex<P> is used to make React.ComponentPropsWithRef typesafe on Tailwind components, delete if causing issues\n\ntype TailwindPropHelper<\n    P,\n    O extends object = {}\n    // PickU is needed here to make $as typing work\n> = PickU<MergeProps<O, P>, keyof MergeProps<O, P>>\n\ntype TailwindComponentPropsWith$As<\n    P extends object,\n    O extends object,\n    $As extends string | React.ComponentType<any> = React.ComponentType<P>,\n    P2 = $As extends AnyTailwindComponent\n        ? TailwindComponentAllInnerProps<$As>\n        : $As extends IntrinsicElementsKeys | React.ComponentType<any>\n        ? React.ComponentPropsWithRef<$As>\n        : never\n> = P & O & TailwindPropHelper<P2> & { $as?: $As }\n\n/**\n * An interface represent a component styled by tailwind-styled-components\n *\n * @export\n * @interface TailwindComponent\n * @template P The base react props\n * @template O The props added with the template function.\n */\nexport type TailwindComponent<P extends object, O extends object = {}> = IsTwElement &\n    TailwindComponentBase<P, O> &\n    WithStyle<P, O>\n\n/**\n * An interface represent a component styled by tailwind-styled-components\n *\n * @export\n * @interface TailwindComponentBase\n * @extends {TailwindExoticComponent<TailwindPropHelper<P, O>>}\n * @template P The base react props\n * @template O The props added with the template function.\n */\nexport interface TailwindComponentBase<P extends object, O extends object = {}>\n    extends TailwindExoticComponent<TailwindPropHelper<P, O>> {\n    // add our own fake call signature to implement the polymorphic '$as' prop\n    (props: TailwindPropHelper<P, O> & { $as?: never | undefined }): React.ReactElement<TailwindPropHelper<P, O>>\n\n    <$As extends string | React.ComponentType<any> = React.ComponentType<P>>(\n        props: TailwindComponentPropsWith$As<P, O, $As>\n    ): React.ReactElement<TailwindComponentPropsWith$As<P, O, $As>>\n}\n/**\n *  An interface represent withStyle functionality\n *\n * @export\n * @interface WithStyle\n * @template P\n * @template O\n */\nexport interface WithStyle<P extends object, O extends object = {}> {\n    withStyle: <S extends object = {}>(\n        styles: CSSProperties | ((p: P & O & S) => CSSProperties)\n    ) => TailwindComponent<P, O & S>\n}\n/**\n * Generice TailwindComponent\n */\ntype AnyTailwindComponent = TailwindComponent<any, any>\n\n/**\n * A template function that accepts a template literal of tailwind classes and returns a tailwind-styled-component\n *\n * @export\n * @interface TemplateFunction\n * @template E\n */\nexport interface TemplateFunction<P extends object, O extends object = {}> {\n    (template: TemplateStringsArray): TailwindComponent<P, O>\n    (\n        template: TemplateStringsArray | InterpolationFunction<P & O>,\n        ...rest: Array<Interpolation<P & O>>\n    ): TailwindComponent<P, O>\n    <K extends object>(\n        template: TemplateStringsArray | InterpolationFunction<P & O & K>,\n        ...rest: Array<Interpolation<P & O & K>>\n    ): TailwindComponent<P, O & K>\n}\n\n/**\n * A utility function that strips out transient props from a [key,value] array of props\n *\n * @param {[string, any]} [key]\n * @return boolean\n */\nconst removeTransientProps = ([key]: [string, any]): boolean => key.charAt(0) !== \"$\"\n\nexport type TailwindComponentInnerProps<C extends AnyTailwindComponent> = C extends TailwindComponent<infer P, any>\n    ? P\n    : never\n\nexport type TailwindComponentInnerOtherProps<C extends AnyTailwindComponent> = C extends TailwindComponent<any, infer O>\n    ? O\n    : never\n\nexport type TailwindComponentAllInnerProps<C extends AnyTailwindComponent> = TailwindComponentInnerProps<C> &\n    TailwindComponentInnerOtherProps<C>\n\nexport type IntrinsicElementsTemplateFunctionsMap = {\n    [RTag in keyof JSX.IntrinsicElements]: TemplateFunction<JSX.IntrinsicElements[RTag]>\n}\n\n/**\n *\n *\n * @export\n * @interface TailwindInterface\n * @extends {IntrinsicElementsTemplateFunctionsMap}\n */\nexport interface TailwindInterface extends IntrinsicElementsTemplateFunctionsMap {\n    <C extends TailwindComponent<any, any>>(component: C): TemplateFunction<\n        TailwindComponentInnerProps<C>,\n        TailwindComponentInnerOtherProps<C>\n    >\n    <C extends React.ComponentType<any>>(component: C): TemplateFunction<\n        // Prevent functional components without props infering props as `unknown`\n        C extends (P?: never) => any ? {} : React.ComponentPropsWithoutRef<C>\n    >\n\n    <C extends keyof JSX.IntrinsicElements>(component: C): TemplateFunction<JSX.IntrinsicElements[C]>\n}\n\nconst isTw = (c: any): c is AnyTailwindComponent => c[isTwElement] === true\n\n// type FDF = React.ElementType<JSX.IntrinsicElements['div']>\n\nconst templateFunctionFactory: TailwindInterface = (<C extends React.ElementType>(Element: C): any => {\n    return (template: TemplateStringsArray, ...templateElements: ((props: any) => string | undefined | null)[]) => {\n        const TwComponentConstructor = (styleArray: (CSSProperties | ((p: any) => CSSProperties))[] = []) => {\n            // const renderFunction =\n            const TwComponent: any = React.forwardRef((baseProps: any, ref: any): JSX.Element => {\n                const { $as = Element, style = {}, ...props } = baseProps\n\n                // set FinalElement based on if Element is a TailwindComponent, $as defaults to Element if undefined\n                const FinalElement = isTw(Element) ? Element : $as\n\n                const withStyles: CSSProperties = styleArray\n                    ? styleArray.reduce<CSSProperties>(\n                          (acc, intStyle) =>\n                              Object.assign(acc, typeof intStyle === \"function\" ? intStyle(baseProps) : intStyle),\n                          {} as CSSProperties\n                      )\n                    : {}\n                // const style = TwComponent.style(props)\n\n                // filter out props that starts with \"$\" props except when styling a tailwind-styled-component\n                const filteredProps = isTw(FinalElement)\n                    ? props\n                    : (Object.fromEntries(Object.entries(props).filter(removeTransientProps)) as any)\n                return (\n                    <FinalElement\n                        // forward props\n                        {...filteredProps}\n                        style={{ ...withStyles, ...style }}\n                        // forward ref\n                        ref={ref}\n                        // set class names\n                        className={cleanTemplate(\n                            mergeArrays(\n                                template,\n                                templateElements.map((t) => t({ ...props, $as }))\n                            ),\n                            props.className\n                        )}\n                        // forward $as prop when styling a tailwind-styled-component\n                        {...(isTw(Element) ? { $as } : {})}\n                    />\n                )\n            }) as any\n            // symbol identifier for detecting tailwind-styled-components\n            TwComponent[isTwElement] = true\n            // This enables the react tree to show a name in devtools, much better debugging experience Note: Far from perfect, better implementations welcome\n            if (typeof Element !== \"string\") {\n                TwComponent.displayName = (Element as any).displayName || (Element as any).name || \"tw.Component\"\n            } else {\n                TwComponent.displayName = \"tw.\" + Element\n            }\n            TwComponent.withStyle = (styles: ((p: any) => CSSProperties) | CSSProperties) =>\n                TwComponentConstructor(styleArray.concat(styles)) as any\n\n            return TwComponent\n        }\n        return TwComponentConstructor()\n    }\n}) as any\n\nconst intrinsicElementsMap: IntrinsicElementsTemplateFunctionsMap = domElements.reduce(\n    <K extends IntrinsicElementsKeys>(acc: IntrinsicElementsTemplateFunctionsMap, DomElement: K) => ({\n        ...acc,\n        [DomElement]: templateFunctionFactory(DomElement)\n    }),\n    {} as IntrinsicElementsTemplateFunctionsMap\n)\n\nconst tw: TailwindInterface = Object.assign(templateFunctionFactory, intrinsicElementsMap)\n\nexport default tw\n","const elementsArray: (keyof JSX.IntrinsicElements)[] = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"big\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"keygen\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"p\",\n    \"param\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"q\",\n    \"rp\",\n    \"rt\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"u\",\n    \"ul\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n\n    // SVG\n    \"circle\",\n    \"clipPath\",\n    \"defs\",\n    \"ellipse\",\n    \"foreignObject\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"marker\",\n    \"mask\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"text\",\n    \"tspan\"\n]\n\nexport default elementsArray\n"]},"metadata":{},"sourceType":"module"}